import { GoogleGenAI, Type } from "@google/genai";
import type { ProcedureSuggestion } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // A real app would have more robust error handling for a missing key.
  // For this context, we throw an error to make it clear during development.
  throw new Error("API_KEY environment variable not set. Please set it to use the AI features.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const procedureSchema = {
  type: Type.OBJECT,
  properties: {
    procedureName: {
      type: Type.STRING,
      description: "A professional, standardized name for the dental procedure.",
    },
    description: {
      type: Type.STRING,
      description: "A detailed description of the procedure suitable for patient records and insurance claims.",
    },
    suggestedCode: {
      type: Type.STRING,
      description: "A standard 5-character alphanumeric dental billing code, typically starting with 'D'. Example: D1110.",
    },
    estimatedCost: {
      type: Type.NUMBER,
      description: "A typical or estimated cost for this procedure in INR. Provide a whole number without currency symbols.",
    },
  },
  required: ["procedureName", "description", "suggestedCode", "estimatedCost"],
};


export const generateProcedureSuggestion = async (userInput: string): Promise<ProcedureSuggestion> => {
  try {
    const prompt = `You are an expert dental billing assistant. Based on the following informal user input, generate a structured dental procedure record.
    
    User Input: "${userInput}"
    
    Your task is to provide a professional procedure name, a detailed description for insurance purposes, a standard 5-character billing code (e.g., Dxxxx), and an estimated cost in INR.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: procedureSchema,
        temperature: 0.2, // Lower temperature for more predictable, professional output
      },
    });
    
    const jsonText = response.text.trim();
    const suggestion = JSON.parse(jsonText) as ProcedureSuggestion;
    
    return suggestion;

  } catch (error) {
    console.error("Error generating procedure suggestion:", error);
    // Provide a more user-friendly error message
    throw new Error("Failed to get AI suggestion. The model may be unable to process the request. Please try a different description.");
  }
};

export const generateProcedureImage = async (procedureName: string): Promise<string> => {
    try {
        const prompt = `Create a visually appealing, professional, and abstract medical illustration related to the dental procedure: "${procedureName}". The image should be clean, modern, and suitable for a patient-facing application. Avoid realistic or graphic depictions of surgery. Focus on concepts like healthy teeth, dental tools in a clean setting, or abstract representations of healing or restoration. For example, for "teeth cleaning," show sparkling clean teeth, not the scraping process. For "X-ray," create a stylized, clean-looking dental radiograph.`;
        
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: prompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '1:1',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            return response.generatedImages[0].image.imageBytes;
        } else {
            throw new Error("No image was generated by the API.");
        }

    } catch (error) {
        console.error("Error generating procedure image:", error);
        throw new Error("Failed to generate AI image. Please try again.");
    }
};
